You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

//cpp my solution

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int c=0;
        ListNode *head,*p1,*p2,*a1;
        
        p1=l1;
        p2=l2;
        a1 = new ListNode(0);
        head = a1;
        
        while(p1 || p2 || c){
            
            int tmp = (p1?p1->val:0)+(p2?p2->val:0)+c;
            c = tmp/10;
            // cout<<tmp<<","<<c<<endl;
            a1->next = new ListNode(tmp%10);
            
            a1 = a1->next;
            if(p1)
                p1 = p1->next;
            if(p2)
                p2 = p2->next;
        }
        
        return head->next;
    }
};
